openapi: 3.0.3
info:
  title: DataHub API
  description: |-
    The DataHub API created to serve DataHub platform which is main concept is to enable users to manage database connections, execute queries, share queries and results.   
    This API supports multiple relational databases, such as PostgreSQL and MySQL, and facilitates tasks including:
    
    Key ares of this API:
    - **Connection Management**: Create, update, delete, list and test database connections.
    - **Query Management**: Write, save, edit, delete, and list queries with parameterization support and compatibility for various database-specific languages.
    - **Query Execution**: Execute stored queries and display results in formats like tables and JSON.
    
    Use Cases:  
    #### Create connection
    - [Connection types](#operation/getConnectionTypes) - Get supported connection types (POSTGRES, MONGO)
    - [Connection parameters](#getConnectionTypeParameters) - Get fields required for creating connection of selected type (for example POSTGRES)
    - [Create connection](#createConnection)
    - [Test connection](#testConnection) - Check if connection can be established
    

  version: 1.0.0
servers:
  - url: 'https://localhost:8080/api/v1'
paths:
  /connections:
    $ref: './paths/connections.yaml'
  /connections/{connectionId}/test:
    parameters:
      - $ref: "./parameters/path/connectionId.yaml"
    post:
      summary: Test connection
      description: Tests the connectivity and return status
      operationId: testConnection
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "./schemas/ConnectionTestResponse.yaml"
  /connections/types:
    get:
      summary: Connection types
      description: Returns supported connection types like POSTGRES, MONGO etc
      operationId: getConnectionTypes
      tags:
        - connections
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "./schemas/ConnectionTypeResponse.yaml"
  /connections/{connectionType}/parameters:
    get:
      summary: Connection parameters
      description: Returns list of input fields that needs to be filled to create a connection
      operationId: getConnectionTypeParameters
      tags:
        - connections
      parameters:
        - name: connectionType
          in: path
          description: Connection type
          required: true
          schema:
            $ref: "./schemas/ConnectionType.yaml"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "./schemas/InputField.yaml"
